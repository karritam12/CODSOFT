# -*- coding: utf-8 -*-
"""CODSOFT_task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GxBwDTI1iOo2Kil-iuX7PDNiiMsTHPrf

# Task 2: MOVIE RATING PREDICTION WITH PYTHON ; CODSOFT internship
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""# Load and Inspect the Dataset"""

file_path = 'movi recomendation data.csv'
data = pd.read_csv(file_path, encoding='latin-1')  # Or 'utf-16', 'ISO-8859-1', etc.

data.head()

print(data.info())

data.describe()

"""# Handle Missing Values"""

print(data.isnull().sum())

# Drop rows with missing 'Rating'
data = data.dropna(subset=['Rating'])

# Fill missing values in categorical columns with 'Unknown'
categorical_cols = ['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']
for col in categorical_cols:
    data[col] = data[col].fillna('Unknown')

data.info()

data.head()



"""# Exploratory Data Analysis (EDA)"""

# Visualize distributions
sns.histplot(data['Rating'], bins=10, kde=True)
plt.show()

"""## Analyze relationships"""

plt.scatter(x=data["Genre"], y=data["Rating"])

plt.xlabel("Genre")
plt.ylabel("Rating")
plt.xticks(rotation=45)
plt.title("Genre vs. Rating")
plt.figure(figsize=(20, 10))
plt.show()

"""# Model building"""

# install catboost
!pip install catboost

# Import CatBoost and Required Libraries

from catboost import CatBoostRegressor
from sklearn.metrics import mean_squared_error, r2_score

"""#  Define Features and Target"""

X = data[['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']]
y = data['Rating']

"""#  Split Data into Training and Test Sets"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Train CatBoostRegressor

**Specify the categorical columns:**
"""

categorical_features = [0, 1, 2, 3, 4]  # Indices of categorical columns in X

"""**Train the model:**"""

model = CatBoostRegressor(cat_features=categorical_features, verbose=100, iterations=500, learning_rate=0.1, depth=6)
model.fit(X_train, y_train)

"""# Predict Ratings"""

y_pred = model.predict(X_test)

y_pred

"""# Evaluate the Model

**Calculate metrics**
"""

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-Squared Score: {r2}")

"""# Visualize Results

**Compare actual vs. predicted ratings**
"""

plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs Predicted Ratings")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Scatter plot: Actual vs Predicted
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.7, color="blue")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', label='Ideal Fit (y=x)')
plt.title("Actual vs Predicted Ratings")
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.legend()
plt.grid(True)
plt.show()

# Histogram: Error distribution
errors = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.histplot(errors, bins=30, kde=True, color="purple")
plt.title("Distribution of Prediction Errors (Actual - Predicted)")
plt.xlabel("Prediction Error")
plt.ylabel("Frequency")
plt.axvline(x=0, color='red', linestyle='--', label='Zero Error Line')
plt.legend()
plt.grid(True)
plt.show()

# Bar plot: Comparison of top 10 predicted vs actual
plt.figure(figsize=(14, 8))
comparison_df = pd.DataFrame({'Actual': y_test.values, 'Predicted': y_pred})
comparison_df = comparison_df.reset_index(drop=True)
comparison_df = comparison_df.head(10)  # Select top 10 rows for visualization

bar_width = 0.35
indices = np.arange(len(comparison_df))

plt.bar(indices, comparison_df['Actual'], width=bar_width, label='Actual Ratings', alpha=0.7, color='blue')
plt.bar(indices + bar_width, comparison_df['Predicted'], width=bar_width, label='Predicted Ratings', alpha=0.7, color='orange')

plt.title('Comparison of Actual vs Predicted Ratings (Top 10 Movies)')
plt.xlabel('Movie Index')
plt.ylabel('Rating')
plt.xticks(indices + bar_width / 2, labels=indices)
plt.legend()
plt.grid(True)
plt.show()